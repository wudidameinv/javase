//注释快捷键 ctrl + /
System.out.println( 10 / 4);
//结果是2 两个int
//取模a % b = a - (a / b )* b
//i++   i=i+1 自增
//作为独立语句 i++ 和++i 一个意思
//++i先自增后赋值 i=i+1 temp=i i=temp i=2
//i++先赋值后自增 temp =i i=i+1 i=temp i=1
//关系运算符 结果是bool值
//&逻辑与 两个都为真才是真  第一个false 后面的判断和执行
//&&短路与 两个都为真才是真 第一个为假 后面的不判断不执行
//|逻辑或 只要一个成立 就为true
//||短路或 只要一个true 就为true 第一个为真 后面的不判断不执行
//！^ !(60 > 20) f 非 真变假 假变真
//a ^ b 逻辑异或 a b不同时为true   true true 为false 
// = 赋值 == 比较
// a+=b a=a+b
// 复合赋值运算类型强制类型转换
// 三元运算符： 表达式1 表达式2
// true 结果表达式1
// false 结果表达式2
// result = a > b ? a++ : b--
// int max1 = n1 > n2 ? n1 : n2;
// int max2 = max1 > n3 ? max1 : n3;
// 运算符优先级 单目运算 赋值运算 从右向左
// （） ++-- 乘除 位移 比较 逻辑运算 三元运算符 赋值
// 进制的转换
// 二转十 0b
// 低位开始 每个位上的位数提取出来 ×2（位数-1）次方
// 八转十
// 低位开始 每个位上的位数提取 诚 8（位数-1）次方相加
// 十六转十 同理 0x
// 十进制转二进制
// 不断除以2 直到商为0 每步余数倒过来
// 二转八
// 低位开始每三位一组 转成八进制输
// 二转16
// 每四位一组 转16进制
// 八转二
// 八进制一位转成三位二进制
// 十六转而
// 一位转成思维二进制
// *****原码 反码 补码
// 二进制最高位符号位 0为正数 1为复数
// 数字有4*8=32位 不够的0补
// 正数的原码反码补码都一样
// 负树的反码 = 原码符号位不变 其他位取反 0变1 1变0
// 负数的补码 = 反码 +1  反码=补码 -1
// 0 的反码 补码都是0
// 运算都是以补码的形式运算
// 看运算结果 看的是原码
// 位运算符
// 按位与& 两个全为1 结果1 反之为0
// 按位或| 两个一个为1 结果1 反之0
// 按位异或^ 两个一个为1一个为0结果为1 反之为0
// 按位取反 0变1 1变0
// 算数右移>> 低位溢出 符号位不变 并用符号位补高位 /2
// 算数左移<< 高位溢出 符号位不变  低位补0         *2
// int a = 1 << 2    1/2/2 = 0
// int c = 1 >> 2    1*2*2 = 4
// double a1 = 3b ok
// double a2 =8   ok
// byte b1 = 2 short b2 = b1 + 1  no int
// int 转 char 不能用（int）而是 interger.parseInt
// a%b 当a为小数时 公式= a -(int)a /b  *b
// int i =66
// System.out.println(++i+i) 结果是134
// i = i +1 i先变成67 再加i 67+67 = 134
// String str = "18.8";
// double d1 = Double.parseDouble(str);
// char = '宇'；
// String s1 = char + "";
// 